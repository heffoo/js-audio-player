{"version":3,"sources":["App.js","index.js"],"names":["App","tracks","title","cover","src","useState","currentTrack","setCurrentTrack","play","setPlay","progressBarPercent","setProgressBarPercent","progressCounter","setProgressCounter","duration","setDuration","audio","useRef","mounted","playTrack","current","nextTrack","index","findIndex","el","length","load","formateTime","minutes","seconds","toString","padStart","join","useEffect","className","style","width","alt","onClick","icon","pause","ref","onTimeUpdate","e","currentTime","progressBar","timestamp","target","Math","floor","counter","onLoadedMetadata","calculateDuration","onEnded","clickX","nativeEvent","offsetX","library","add","far","fas","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b4ca433.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.scss\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction App() {\n  const tracks = [\n    {\n      title: \"HIM - Pretending\",\n      cover: \"./assets/pretending_cover.png\",\n      src: \"./audio/pretending.mp3\",\n    },\n    {\n      title: \"Pain - Shut Your Mouth\",\n      cover: \"./assets/pain.png\",\n      src: \"./audio/pain.mp3\",\n    },\n    {\n      title: \"Crazytown - Butterfly\",\n      cover: \"./assets/butterfly.png\",\n      src: \"./audio/butterfly.mp3\",\n    },\n  ];\n\n  const [currentTrack, setCurrentTrack] = useState(tracks[0]);\n\n  const [play, setPlay] = useState(\"pause\");\n  const [progressBarPercent, setProgressBarPercent] = useState(0);\n  const [progressCounter, setProgressCounter] = useState(\"00:00\");\n  const [duration, setDuration] = useState(\"00:00\");\n\n  const audio = useRef();\n  const mounted = useRef(false);\n\n  function playTrack() {\n    setPlay(\"play\");\n    audio.current.play();\n  }\n\n  function pauseTrack() {\n    setPlay(\"pause\");\n    audio.current.pause();\n  }\n\n  useEffect(() => {\n    if (!mounted.current) {\n      mounted.current = true;\n    } else {\n      playTrack();\n    }\n  }, [currentTrack]);\n\n  function prevTrack() {\n    let index = tracks.findIndex((el) => el.title === currentTrack.title);\n    setCurrentTrack(index === 0 ? tracks[2] : tracks[index - 1]); // потом пофиксить (чтоб было -1, а не -2, разобраться почему так ваще)\n\n    audio.current.load();\n  }\n\n  function nextTrack() {\n    let index = tracks.findIndex((el) => el.title === currentTrack.title);\n    setCurrentTrack(index > tracks.length - 2 ? tracks[0] : tracks[index + 1]); // потом пофиксить (чтоб было -1, а не -2, разобраться почему так ваще)\n\n    audio.current.load();\n  }\n\n  function progressBar() {\n    const { duration, currentTime } = audio.current;\n    setProgressBarPercent((currentTime / duration) * 100);\n  }\n\n  function rewindSong(e) {\n    const barWidth = 600;\n    const clickX = e.nativeEvent.offsetX;\n    const { duration } = audio.current;\n\n    audio.current.currentTime = (clickX / barWidth) * duration;\n  }\n\n  function formateTime(minutes, seconds) {\n    return [minutes.toString().padStart(2, \"0\"), seconds.toString().padStart(2, \"0\")].join(\":\");\n  }\n\n  function counter(e) {\n    let timestamp = e.target.currentTime;\n    let minutes = Math.floor(timestamp / 60);\n    let seconds = Math.floor(timestamp % 60);\n\n    setProgressCounter(formateTime(minutes, seconds));\n  }\n  \n  function calculateDuration(e) {\n    let duration = e.target.duration;\n    \n    let minutes = Math.floor(duration / 60);\n    let seconds = Math.floor(duration % 60);\n\n    setDuration(formateTime(minutes, seconds));\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"player\">\n        <label>Current track: {currentTrack.title}</label>\n        <img style={{width: 200}} src={currentTrack.cover} alt=\"cover\"/>\n        <div className=\"buttons\">\n          <button className=\"control-button\" onClick={prevTrack}>\n            <FontAwesomeIcon icon=\"backward\" />\n          </button>\n          {play === \"pause\" ? (\n            <button className=\"control-button\" onClick={playTrack}>\n              <FontAwesomeIcon icon=\"play\" />\n            </button>\n          ) : (\n            <button className=\"control-button\" onClick={pauseTrack}>\n              <FontAwesomeIcon icon=\"pause\" />\n            </button>\n          )}\n          <button className=\"control-button\" onClick={nextTrack}>\n            <FontAwesomeIcon icon=\"forward\" />\n          </button>\n        </div>\n        <audio\n          ref={audio}\n          className=\"audio1\"\n          src={currentTrack.src}\n          onTimeUpdate={(e) => {\n            progressBar();\n            counter(e);\n          }}\n          onLoadedMetadata={(e) => calculateDuration(e)}\n          onEnded={nextTrack}\n        />\n\n        <div className=\"progressbar\" onClick={rewindSong}>\n          <div className=\"time\">{progressCounter}</div>\n          <div className=\"endTime\">{duration}</div>\n          <div className=\"progress\" style={{ width: progressBarPercent + \"%\" }}></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\n\nlibrary.add(far);\nlibrary.add(fas);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
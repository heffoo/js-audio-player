{"version":3,"sources":["App.js","index.js"],"names":["App","tracks","singer","track","title","cover","src","useState","currentTrack","setCurrentTrack","play","setPlay","progressBarPercent","setProgressBarPercent","progressCounter","setProgressCounter","duration","setDuration","muted","setMuted","repeat","setRepeat","audio","useRef","mounted","playTrack","current","nextTrack","index","findIndex","el","length","load","formateTime","minutes","seconds","toString","padStart","join","useEffect","className","style","width","alt","onClick","pause","ref","onTimeUpdate","e","currentTime","progressBar","timestamp","target","Math","floor","counter","onLoadedMetadata","calculateDuration","onEnded","loop","clickX","nativeEvent","offsetX","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d5a857a.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { MdRepeat, MdRepeatOne } from \"react-icons/md\";\nimport { GoUnmute, GoMute } from \"react-icons/go\";\nimport { IoPlay, IoPlayForward, IoPlayBack, IoPause } from \"react-icons/io5\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  const tracks = [\n    {\n      singer: \"HIM\",\n      track: \"Pretending\",\n      title: \"HIM - Pretending\",\n      cover: \"./assets/pretending_cover.png\",\n      src: \"./audio/pretending.mp3\",\n    },\n    {\n      singer: \"Pain\",\n      track: \"Shut Your Mouth\",\n      title: \"Pain - Shut Your Mouth\",\n      cover: \"./assets/pain.png\",\n      src: \"./audio/pain.mp3\",\n    },\n    {\n      singer: \"Crazytown\",\n      track: \"Butterfly\",\n      title: \"Crazytown - Butterfly\",\n      cover: \"./assets/butterfly.png\",\n      src: \"./audio/butterfly.mp3\",\n    },\n    {\n      singer: \"Dreadful Shadows\",\n      track: \"Futility\",\n      title: \"Dreadful Shadows - Futility\",\n      cover: \"./assets/ds.png\",\n      src: \"./audio/futility.mp3\",\n    },\n    {\n      singer: \"Soundgarden\",\n      track: \"Black Hole Sun\",\n      title: \"Soundgarden - Black Hole Sun\",\n      cover: \"./assets/soundgarden.png\",\n      src: \"./audio/soundgarden.mp3\",\n    },\n  ];\n\n  const [currentTrack, setCurrentTrack] = useState(tracks[0]);\n\n  const [play, setPlay] = useState(\"pause\");\n  const [progressBarPercent, setProgressBarPercent] = useState(0);\n  const [progressCounter, setProgressCounter] = useState(\"00:00\");\n  const [duration, setDuration] = useState(\"00:00\");\n  const [muted, setMuted] = useState(false);\n  const [repeat, setRepeat] = useState(false);\n\n  const audio = useRef();\n  const mounted = useRef(false);\n\n  function playTrack() {\n    setPlay(\"play\");\n    audio.current.play();\n  }\n\n  function pauseTrack() {\n    setPlay(\"pause\");\n    audio.current.pause();\n  }\n\n  useEffect(() => {\n    if (!mounted.current) {\n      mounted.current = true;\n    } else {\n      playTrack();\n    }\n  }, [currentTrack]);\n\n  function prevTrack() {\n    let index = tracks.findIndex((el) => el.title === currentTrack.title);\n    setCurrentTrack(index === 0 ? tracks[4] : tracks[index - 1]);\n\n    audio.current.load();\n  }\n\n  function nextTrack() {\n    let index = tracks.findIndex((el) => el.title === currentTrack.title);\n    setCurrentTrack(index > tracks.length - 2 ? tracks[0] : tracks[index + 1]);\n\n    audio.current.load();\n  }\n\n  function progressBar() {\n    const { duration, currentTime } = audio.current;\n    setProgressBarPercent((currentTime / duration) * 100);\n  }\n\n  function rewindSong(e) {\n    const barWidth = 600;\n    const clickX = e.nativeEvent.offsetX;\n    const { duration } = audio.current;\n\n    audio.current.currentTime = (clickX / barWidth) * duration;\n  }\n\n  function formateTime(minutes, seconds) {\n    return [minutes.toString().padStart(2, \"0\"), seconds.toString().padStart(2, \"0\")].join(\":\");\n  }\n\n  function counter(e) {\n    let timestamp = e.target.currentTime;\n    let minutes = Math.floor(timestamp / 60);\n    let seconds = Math.floor(timestamp % 60);\n\n    setProgressCounter(formateTime(minutes, seconds));\n  }\n\n  function calculateDuration(e) {\n    let duration = e.target.duration;\n\n    let minutes = Math.floor(duration / 60);\n    let seconds = Math.floor(duration % 60);\n\n    setDuration(formateTime(minutes, seconds));\n  }\n\n  return <div className=\"App\">\n      <div className=\"player\">\n        <img style={{ width: 200 }} src={currentTrack.cover} alt=\"cover\" />\n        <div className=\"buttons\">\n          <button className=\"control-button\" onClick={prevTrack}>\n            <IoPlayBack />\n          </button>\n          {play === \"pause\" ? (\n            <button className=\"control-button\" onClick={playTrack}>\n              <IoPlay />\n            </button>\n          ) : (\n            <button className=\"control-button\" onClick={pauseTrack}>\n              <IoPause />\n            </button>\n          )}\n          <button className=\"control-button\" onClick={nextTrack}>\n            <IoPlayForward />\n          </button>\n        </div>\n        <div className=\"title\">\n          <label className=\"singer\">{currentTrack.singer}</label>\n          <label>{currentTrack.track}</label>\n        </div>\n        <audio\n          ref={audio}\n          className=\"audio1\"\n          src={currentTrack.src}\n          onTimeUpdate={(e) => {\n            progressBar();\n            counter(e);\n          }}\n          onLoadedMetadata={(e) => calculateDuration(e)}\n          onEnded={nextTrack}\n          muted={muted}\n          loop={repeat}\n        />\n        <div className=\"progress-buttons\">\n          <button className=\"progress-buttons__button\" onClick={() => setMuted(!muted)}>\n            {muted ? <GoMute /> : <GoUnmute />}\n          </button>\n          <button className=\"progress-buttons__button\" onClick={() => setRepeat(!repeat)}>\n            {repeat ? <MdRepeatOne /> : <MdRepeat />}\n          </button>\n        </div>\n        <div className=\"progressbar\" onClick={rewindSong}>\n          <div className=\"time\">{progressCounter}</div>\n          <div className=\"endTime\">{duration}</div>\n          <div className=\"progress\" style={{ width: progressBarPercent + \"%\" }}></div>\n        </div>\n      </div>\n    </div>\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
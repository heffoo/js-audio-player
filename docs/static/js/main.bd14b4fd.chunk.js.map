{"version":3,"sources":["assets/No_cover.png","App.js","index.js"],"names":["tracks","singer","track","title","cover","src","App","useState","currentTrack","setCurrentTrack","play","setPlay","progressBarPercent","setProgressBarPercent","progressCounter","setProgressCounter","duration","setDuration","muted","setMuted","repeat","setRepeat","popupShow","setPopupShow","audio","useRef","mounted","playTrack","current","nextTrack","index","findIndex","el","length","load","formateTime","minutes","seconds","toString","padStart","join","Popup","setTimeout","id","className","useEffect","class","type","accept","onChange","e","trackName","target","files","name","split","push","NoCover","URL","createObjectURL","addFile","style","width","alt","onClick","pause","replace","ref","onTimeUpdate","currentTime","progressBar","timestamp","Math","floor","counter","onLoadedMetadata","calculateDuration","onEnded","loop","clickX","nativeEvent","offsetX","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd14b4fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/No_cover.12caaab3.png\";","import React, { useState, useRef, useEffect } from \"react\";\nimport { MdRepeat, MdRepeatOne } from \"react-icons/md\";\nimport { GoUnmute, GoMute } from \"react-icons/go\";\nimport { IoPlay, IoPlayForward, IoPlayBack, IoPause } from \"react-icons/io5\";\nimport NoCover from \"./assets/No_cover.png\";\n\nimport \"./App.scss\";\nconst tracks = [\n  {\n    singer: \"HIM\",\n    track: \"Pretending\",\n    title: \"HIM - Pretending\",\n    cover: \"./assets/pretending_cover.png\",\n    src: \"./audio/pretending.mp3\",\n  },\n  {\n    singer: \"Pain\",\n    track: \"Shut Your Mouth\",\n    title: \"Pain - Shut Your Mouth\",\n    cover: \"./assets/pain.png\",\n    src: \"./audio/pain.mp3\",\n  },\n  {\n    singer: \"Crazytown\",\n    track: \"Butterfly\",\n    title: \"Crazytown - Butterfly\",\n    cover: \"./assets/butterfly.png\",\n    src: \"./audio/butterfly.mp3\",\n  },\n  {\n    singer: \"Dreadful Shadows\",\n    track: \"Futility\",\n    title: \"Dreadful Shadows - Futility\",\n    cover: \"./assets/ds.png\",\n    src: \"./audio/futility.mp3\",\n  },\n  {\n    singer: \"Soundgarden\",\n    track: \"Black Hole Sun\",\n    title: \"Soundgarden - Black Hole Sun\",\n    cover: \"./assets/soundgarden.png\",\n    src: \"./audio/soundgarden.mp3\",\n  },\n];\nfunction App() {\n  const [currentTrack, setCurrentTrack] = useState(tracks[0]);\n  const [play, setPlay] = useState(\"pause\");\n  const [progressBarPercent, setProgressBarPercent] = useState(0);\n  const [progressCounter, setProgressCounter] = useState(\"00:00\");\n  const [duration, setDuration] = useState(\"00:00\");\n  const [muted, setMuted] = useState(false);\n  const [repeat, setRepeat] = useState(false);\n  const [popupShow, setPopupShow] = useState(false);\n\n  const audio = useRef();\n  const mounted = useRef(false);\n\n  function playTrack() {\n    setPlay(\"play\");\n    audio.current.play();\n  }\n\n  function pauseTrack() {\n    setPlay(\"pause\");\n    audio.current.pause();\n  }\n\n  useEffect(() => {\n    if (!mounted.current) {\n      mounted.current = true;\n    } else {\n      playTrack();\n    }\n  }, [currentTrack]);\n\n  function prevTrack() {\n    let index = tracks.findIndex((el) => el.title === currentTrack.title);\n    setCurrentTrack(\n      index === 0 ? tracks[tracks.length - 1] : tracks[index - 1]\n    );\n\n    audio.current.load();\n  }\n\n  function nextTrack() {\n    let index = tracks.findIndex((el) => el.title === currentTrack.title);\n    setCurrentTrack(index > tracks.length - 2 ? tracks[0] : tracks[index + 1]);\n\n    audio.current.load();\n  }\n\n  function progressBar() {\n    const { duration, currentTime } = audio.current;\n    setProgressBarPercent((currentTime / duration) * 100);\n  }\n\n  function rewindSong(e) {\n    const barWidth = 600;\n    const clickX = e.nativeEvent.offsetX;\n    const { duration } = audio.current;\n\n    audio.current.currentTime = (clickX / barWidth) * duration;\n  }\n\n  function formateTime(minutes, seconds) {\n    return [\n      minutes.toString().padStart(2, \"0\"),\n      seconds.toString().padStart(2, \"0\"),\n    ].join(\":\");\n  }\n\n  function counter(e) {\n    let timestamp = e.target.currentTime;\n    let minutes = Math.floor(timestamp / 60);\n    let seconds = Math.floor(timestamp % 60);\n\n    setProgressCounter(formateTime(minutes, seconds));\n  }\n\n  function calculateDuration(e) {\n    let duration = e.target.duration;\n\n    let minutes = Math.floor(duration / 60);\n    let seconds = Math.floor(duration % 60);\n\n    setDuration(formateTime(minutes, seconds));\n  }\n\n  function addFile(e) {\n    const trackName = e.target.files[0].name.split(\"-\");\n    tracks.push({\n      singer: trackName[0],\n      track: trackName[1],\n      title: trackName,\n      cover: NoCover,\n      src: URL.createObjectURL(e.target.files[0]),\n    });\n    setPopupShow(true);\n  }\n\n  function Popup() {\n    setTimeout(() => {\n      setPopupShow(false);\n    }, 3000);\n\n    return <div id=\"popup\" className=\"popup\">\n        Песня в очереди\n      </div>\n  }\n\n  return <div className=\"App\">\n      {popupShow && <Popup />}\n      <div className=\"player\">\n        <label class=\"custom-file-upload\">\n          Добавить песню\n          <input\n            type=\"file\"\n            accept=\"audio/mp3\"\n            id=\"inputElement\"\n            onChange={(e) => addFile(e)}\n          />\n        </label>\n        <img style={{ width: 200 }} src={currentTrack.cover} alt=\"cover\" />\n        <div className=\"buttons\">\n          <button className=\"control-button\" onClick={prevTrack}>\n            <IoPlayBack />\n          </button>\n          {play === \"pause\" ? (\n            <button className=\"control-button\" onClick={playTrack}>\n              <IoPlay />\n            </button>\n          ) : (\n            <button className=\"control-button\" onClick={pauseTrack}>\n              <IoPause />\n            </button>\n          )}\n          <button className=\"control-button\" onClick={nextTrack}>\n            <IoPlayForward />\n          </button>\n        </div>\n        <div className=\"title\">\n          <label className=\"singer\">{currentTrack.singer}</label>\n          <label>{currentTrack.track.replace(\".mp3\", \"\")}</label>\n        </div>\n        <audio\n          ref={audio}\n          className=\"audio1\"\n          src={currentTrack.src}\n          onTimeUpdate={(e) => {\n            progressBar();\n            counter(e);\n          }}\n          onLoadedMetadata={(e) => calculateDuration(e)}\n          onEnded={nextTrack}\n          muted={muted}\n          loop={repeat}\n        />\n        <div className=\"progress-buttons\">\n          <button\n            className=\"progress-buttons__button\"\n            onClick={() => setMuted(!muted)}\n          >\n            {muted ? <GoMute /> : <GoUnmute />}\n          </button>\n          <button\n            className=\"progress-buttons__button\"\n            onClick={() => setRepeat(!repeat)}\n          >\n            {repeat ? <MdRepeatOne /> : <MdRepeat />}\n          </button>\n        </div>\n        <div className=\"progressbar\" onClick={rewindSong}>\n          <div className=\"time\">{progressCounter}</div>\n          <div className=\"endTime\">{duration}</div>\n          <div\n            className=\"progress\"\n            style={{ width: progressBarPercent + \"%\" }}\n          ></div>\n        </div>\n      </div>\n    </div>\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}